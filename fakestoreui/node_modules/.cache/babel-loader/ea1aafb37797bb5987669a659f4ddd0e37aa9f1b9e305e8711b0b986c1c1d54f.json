{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: JSON.parse(localStorage.getItem(\"cartItems\")) || []\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      if (existingItem) {\n        existingItem.quantity += 1;\n      } else {\n        state.items.push({\n          ...action.payload,\n          quantity: 1\n        }); // Add new item with quantity = 1\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.items));\n    },\n    increaseQuantity: (state, action) => {\n      const item = state.items.find(item => item.id === action.payload);\n      if (item) {\n        item.quantity += 1;\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.items));\n    },\n    decreaseQuantity: (state, action) => {\n      const item = state.items.find(item => item.id === action.payload);\n      if (item && item.quantity > 1) {\n        item.quantity -= 1;\n      } else {\n        state.items = state.items.filter(item => item.id !== action.payload);\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.items));\n    },\n    removeFromCart: (state, action) => {\n      state.items = state.items.filter(item => item.id !== action.payload);\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.items));\n    }\n  }\n});\nexport const {\n  addToCart,\n  increaseQuantity,\n  decreaseQuantity,\n  removeFromCart\n} = cartSlice.actions;\nconst store = configureStore({\n  reducer: {\n    cart: cartSlice.reducer\n  }\n});\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","cartSlice","name","initialState","items","JSON","parse","localStorage","getItem","reducers","addToCart","state","action","existingItem","find","item","id","payload","quantity","push","setItem","stringify","increaseQuantity","decreaseQuantity","filter","removeFromCart","actions","store","reducer","cart"],"sources":["C:/Users/Rama Krishna/fakestoreapi/fakestoreui/src/Fakestore-Components/store.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n    name: \"cart\",\r\n    initialState: {\r\n        items: JSON.parse(localStorage.getItem(\"cartItems\")) || [],\r\n    },\r\n    reducers: {\r\n        addToCart: (state, action) => {\r\n            const existingItem = state.items.find(item => item.id === action.payload.id);\r\n            if (existingItem) {\r\n                existingItem.quantity += 1; \r\n            } else {\r\n                state.items.push({ ...action.payload, quantity: 1 }); // Add new item with quantity = 1\r\n            }\r\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.items));\r\n        },\r\n        increaseQuantity: (state, action) => {\r\n            const item = state.items.find(item => item.id === action.payload);\r\n            if (item) {\r\n                item.quantity += 1;\r\n            }\r\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.items));\r\n        },\r\n        decreaseQuantity: (state, action) => {\r\n            const item = state.items.find(item => item.id === action.payload);\r\n            if (item && item.quantity > 1) {\r\n                item.quantity -= 1;\r\n            } else {\r\n                state.items = state.items.filter(item => item.id !== action.payload);\r\n            }\r\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.items));\r\n        },\r\n        removeFromCart: (state, action) => {\r\n            state.items = state.items.filter(item => item.id !== action.payload);\r\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.items));\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addToCart, increaseQuantity, decreaseQuantity, removeFromCart } = cartSlice.actions;\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        cart: cartSlice.reducer,\r\n    },\r\n});\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI;EAC5D,CAAC;EACDC,QAAQ,EAAE;IACNC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1B,MAAMC,YAAY,GAAGF,KAAK,CAACP,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MAC5E,IAAIH,YAAY,EAAE;QACdA,YAAY,CAACK,QAAQ,IAAI,CAAC;MAC9B,CAAC,MAAM;QACHP,KAAK,CAACP,KAAK,CAACe,IAAI,CAAC;UAAE,GAAGP,MAAM,CAACK,OAAO;UAAEC,QAAQ,EAAE;QAAE,CAAC,CAAC,CAAC,CAAC;MAC1D;MACAX,YAAY,CAACa,OAAO,CAAC,WAAW,EAAEf,IAAI,CAACgB,SAAS,CAACV,KAAK,CAACP,KAAK,CAAC,CAAC;IAClE,CAAC;IACDkB,gBAAgB,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAMG,IAAI,GAAGJ,KAAK,CAACP,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACjE,IAAIF,IAAI,EAAE;QACNA,IAAI,CAACG,QAAQ,IAAI,CAAC;MACtB;MACAX,YAAY,CAACa,OAAO,CAAC,WAAW,EAAEf,IAAI,CAACgB,SAAS,CAACV,KAAK,CAACP,KAAK,CAAC,CAAC;IAClE,CAAC;IACDmB,gBAAgB,EAAEA,CAACZ,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAMG,IAAI,GAAGJ,KAAK,CAACP,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACjE,IAAIF,IAAI,IAAIA,IAAI,CAACG,QAAQ,GAAG,CAAC,EAAE;QAC3BH,IAAI,CAACG,QAAQ,IAAI,CAAC;MACtB,CAAC,MAAM;QACHP,KAAK,CAACP,KAAK,GAAGO,KAAK,CAACP,KAAK,CAACoB,MAAM,CAACT,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACxE;MACAV,YAAY,CAACa,OAAO,CAAC,WAAW,EAAEf,IAAI,CAACgB,SAAS,CAACV,KAAK,CAACP,KAAK,CAAC,CAAC;IAClE,CAAC;IACDqB,cAAc,EAAEA,CAACd,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACP,KAAK,GAAGO,KAAK,CAACP,KAAK,CAACoB,MAAM,CAACT,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACpEV,YAAY,CAACa,OAAO,CAAC,WAAW,EAAEf,IAAI,CAACgB,SAAS,CAACV,KAAK,CAACP,KAAK,CAAC,CAAC;IAClE;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEM,SAAS;EAAEY,gBAAgB;EAAEC,gBAAgB;EAAEE;AAAe,CAAC,GAAGxB,SAAS,CAACyB,OAAO;AAElG,MAAMC,KAAK,GAAG5B,cAAc,CAAC;EACzB6B,OAAO,EAAE;IACLC,IAAI,EAAE5B,SAAS,CAAC2B;EACpB;AACJ,CAAC,CAAC;AAEF,eAAeD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}